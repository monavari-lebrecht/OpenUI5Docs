#!/usr/bin/env node

var fs = require('fs');
var mkdirp = require('mkdirp');
var path = require('path');
var log = require('verbalize');
var _ = require('lodash');
var ncp = require('ncp').ncp;
var sqlite3 = require('sqlite3').verbose();
var Crawler = require("crawler").Crawler;
var argv = require('minimist')(process.argv.slice(2));

/**
 * Everything in the file should be customized
 */


	// Verbalize `runner`
log.runner = 'open-ui5-docs';

// Use `-n` or `--name` to specify the text to append
var name = argv._[0] || argv.n || argv.name;

// Use `-n` or `--name` to specify the text to append
var jsdocs = argv._[1] || argv.d || argv.jsdocs;

var docsetPath = path.resolve() + '/' + name + '.docset/';
var targetDocumentationDirectory = docsetPath + 'Contents/Resources/Documents/';

/**
 * populates database with data from docset
 */
function populateDatabase() {
	// create sqlite database
	var sqliteFile = docsetPath + 'Contents/Resources/docSet.dsidx';
	var database = new sqlite3.Database(sqliteFile);

	database.serialize(function () {
		// create tables
		database.run("CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT)");
		database.run("CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path)");
		var stmt = database.prepare("INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?, ?, ?)");

		// get all files in to index
		fs.readdir(targetDocumentationDirectory, function (err, files) {
			files.forEach(function (file) {
				// insert class to index
				var className = file.substring(0, file.length - 5);
				stmt.run(className, 'Class', file);
				console.log('add class to db index: ' + className);

				// crawl each file and insert its contents to index
				var crawler = new Crawler({
					"maxConnections": 10,

					// This will be called for each crawled page
					"callback"      : function (error, result, $) {
						if(error == null) {
							console.log('parse file "' + file + '" for events');
							// $ is a jQuery instance scoped to the server-side DOM of the page
							// add all events to index
							$('[id^="event:"]').each(function (index, event) {
								var eventName = $(event).text();
								stmt.run(className + ':' + eventName, 'Event', file + '#' + $(event).attr('id'));
								console.log('add event to db index: ' + eventName);
							});
						}
					}
				});

				var filePath = targetDocumentationDirectory + file;
				fs.lstat(filePath, function (err, stats) {
					if (stats.isFile()) {
						fs.readFile(filePath, function (err, data) {
							crawler.queue([
								{
									'html': data
								}
							]);
						});
					}
				});
			});
		});
		// when everything is parsed... write to db
		process.on('exit', function (code) {
			console.log('write to db');
			stmt.finalize();

			database.close();
		});
	});
}
/**
 * Application
 */

	// create filesystem for dash docset
mkdirp(targetDocumentationDirectory, function () {
	console.log('Docset scaffold created!')
	// copy all jsdoc files to dashdocset
	ncp(jsdocs, targetDocumentationDirectory, function (err) {
		if (err) {
			return console.error(err);
		}
		console.log('Documentation copied!');

		populateDatabase();
	});
	// create info.plist file
	fs.readFile(__dirname + '/../templates/Info.plist', 'utf-8', function (err, data) {
		var infoPlistTemplated = _.template(data, {
			'bundleName': name
		});
		fs.writeFileSync(docsetPath + 'Contents/Info.plist', infoPlistTemplated);
	});
});
