#!/usr/bin/env node

var fs = require('fs');
var mkdirp = require('mkdirp');
var _ = require('lodash');
var path = require('path');
var log = require('verbalize');
var argv = require('minimist')(process.argv.slice(2));
var jsonFile = require('jsonfile');
var util = require('util');

/**
 * Everything in the file should be customized
 */


	// Verbalize `runner`
log.runner = 'open-ui5-docs';

// Use `-n` or `--name` to specify the text to append
var name = argv._[0] || argv.n || argv.name;

// Use `-n` or `--name` to specify the text to append
var jsdocs = argv._[1] || argv.d || argv.jsdocs;

/**
 * Application
 */

var index = [];
var classes = {};
// create output directory
var outputDirectory = path.resolve() + '/out/';
mkdirp.sync(outputDirectory);

"use strict";

// write index files, when process finishes
process.on('exit', function (code) {
	console.log('write files');
	jsonFile.writeFileSync(outputDirectory + 'index.json', index);
	for (var key in classes) {
		jsonFile.writeFileSync(outputDirectory + key + '.json', classes[key]);
	}
});

jsonFile.readFile(jsdocs, function (error, data) {
	if (error == null) {
		var processElements = function (element) {
			// add element to index
			function addClassObject(className, classDescription) {
				classes[className] = {
					'description': classDescription
				};
			}

			if(element.kind != 'package') {
				var description = {
					'kind'    : element.kind,
					'name'    : element.name,
					'longName': element.longname
				};
				index.push(description);

				switch (element.kind) {
					case 'class':
						addClassObject(element.longName, description);
						break;
					default:
						if(!classes.hasOwnProperty(element.memberof)) {
							addClassObject(element.memberof, description);
						}
						if(!classes[element.memberof].hasOwnProperty(element.kind)) {
							classes[element.memberof][element.kind] = {};
						}
						classes[element.memberof][element.kind][element.name] = element;
						break;
				}
			}
		};
		data.forEach(processElements);
	}
});
